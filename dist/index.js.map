{"version":3,"sources":["../src/index.ts","../src/create-server.ts","../mcp.config.ts","../src/modules/core/config.ts","../src/modules/core/base.ts","../src/modules/core/tool.ts","../src/modules/core/prompt.ts","../src/modules/core/registry.ts","../src/modules/tools/echo.ts","../src/modules/tools/add.ts","../src/modules/prompts/git-commit.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { createServer } from \"./create-server.js\";\n\nasync function main() {\n  const transport = new StdioServerTransport();\n  const { server, cleanup } = createServer();\n\n  await server.connect(transport);\n\n  // Cleanup on exit\n  process.on(\"SIGINT\", async () => {\n    await cleanup();\n    await server.close();\n    process.exit(0);\n  });\n}\n\nmain().catch((error) => {\n  console.error(\"Server error:\", error);\n  process.exit(1);\n});\n","import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { Registry } from \"./modules/core\";\n\n// Import modules to ensure tools and prompts are loaded and registered\nimport \"./modules/tools\";\nimport \"./modules/prompts\";\n\nexport const createServer = () => {\n  console.log(\"üöÄ Creating MCP server\");\n\n  const server = new Server(\n    {\n      name: \"example-servers/everything\",\n      version: \"1.0.0\",\n    },\n    {\n      capabilities: {\n        prompts: {},\n        resources: { subscribe: true },\n        tools: {},\n        logging: {},\n      },\n    }\n  );\n\n  // Register repositories with server\n  Registry.getInstance().registerWithServer(server);\n  console.log(\"‚úÖ Repositories registered successfully\");\n\n  const cleanup = async () => {\n    console.log(\"üßπ Running server cleanup\");\n    // Add any cleanup logic here\n  };\n\n  return { server, cleanup };\n};\n","interface MCPConfig {\r\n  prefix?: string;\r\n}\r\n\r\nexport const config: MCPConfig = {\r\n  prefix: \"mcp\",\r\n};\r\n","import { config as mcpConfig } from \"../../../mcp.config\";\r\n\r\nexport interface MCPConfig {\r\n  prefix?: string;\r\n}\r\n\r\nexport const config: MCPConfig = mcpConfig;\r\n\r\nexport const getNameWithPrefix = (name: string): string => {\r\n  if (!config.prefix) return name;\r\n  return `${config.prefix}_${name}`;\r\n};\r\n","import { getNameWithPrefix } from \"./config\";\n\n/**\n * Base interface for all MCP component definitions\n */\nexport interface BaseDefinition {\n  name: string;\n  description: string;\n}\n\n/**\n * Error types for component operations\n */\nexport enum ComponentErrorType {\n  NOT_FOUND = \"NOT_FOUND\",\n  INVALID_ARGS = \"INVALID_ARGS\",\n  EXECUTION_ERROR = \"EXECUTION_ERROR\",\n}\n\n/**\n * Custom error class for component operations\n */\nexport class ComponentError extends Error {\n  constructor(\n    public readonly type: ComponentErrorType,\n    message: string,\n    public readonly componentName: string\n  ) {\n    super(`${type}: ${message}`);\n    this.name = \"ComponentError\";\n  }\n}\n\n/**\n * Base class for all MCP components\n */\nexport abstract class BaseComponent<TDefinition extends BaseDefinition> {\n  private readonly prefixedName: string;\n\n  constructor(private readonly definition: TDefinition) {\n    this.prefixedName = getNameWithPrefix(definition.name);\n  }\n\n  public getName(): string {\n    return this.prefixedName;\n  }\n\n  public getDescription(): string {\n    return this.definition.description;\n  }\n\n  public getDefinition(): TDefinition {\n    return {\n      ...this.definition,\n      name: this.prefixedName,\n    };\n  }\n}\n\n/**\n * Base repository for managing collections of MCP components\n */\nexport abstract class BaseRepository<\n  TComponent extends BaseComponent<TDefinition>,\n  TDefinition extends BaseDefinition,\n> {\n  private readonly components = new Map<string, TComponent>();\n\n  /**\n   * Register a component with the repository\n   * @throws {ComponentError} If component with same name already exists\n   */\n  public register(component: TComponent): void {\n    this.components.set(component.getName(), component);\n  }\n\n  /**\n   * Get a component by name\n   * @returns The component or undefined if not found\n   */\n  public get(name: string): TComponent | undefined {\n    return this.components.get(name);\n  }\n\n  /**\n   * Get all registered components\n   */\n  public getAll(): TComponent[] {\n    return Array.from(this.components.values());\n  }\n\n  /**\n   * Get all component definitions\n   */\n  public getAllDefinitions(): TDefinition[] {\n    return this.getAll().map(\n      (component) => component.getDefinition() as TDefinition\n    );\n  }\n}\n","import { z } from \"zod\";\r\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\r\nimport {\r\n  BaseComponent,\r\n  BaseDefinition,\r\n  BaseRepository,\r\n  ComponentError,\r\n  ComponentErrorType,\r\n} from \"./base\";\r\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\r\nimport {\r\n  CallToolRequestSchema,\r\n  ListToolsRequestSchema,\r\n} from \"@modelcontextprotocol/sdk/types.js\";\r\nimport { Registry } from \"./registry\";\r\n\r\n/**\r\n * Tool definition interface\r\n */\r\nexport interface ToolDefinition extends BaseDefinition {\r\n  inputSchema: ReturnType<typeof zodToJsonSchema>;\r\n  outputSchema: ReturnType<typeof zodToJsonSchema>;\r\n}\r\n\r\n/**\r\n * Tool execution error class\r\n */\r\nexport class ToolExecutionError extends Error {\r\n  constructor(\r\n    public readonly toolName: string,\r\n    message: string,\r\n    public readonly cause?: unknown\r\n  ) {\r\n    super(`Tool execution error (${toolName}): ${message}`);\r\n    this.name = \"ToolExecutionError\";\r\n  }\r\n}\r\n\r\n/**\r\n * Tool component class\r\n */\r\nexport class Tool<\r\n  TInput = unknown,\r\n  TOutput = unknown,\r\n> extends BaseComponent<ToolDefinition> {\r\n  constructor(\r\n    definition: ToolDefinition,\r\n    private readonly execute: (args: TInput) => Promise<TOutput>\r\n  ) {\r\n    super(definition);\r\n    // Auto-register with repository\r\n    Registry.getToolRepository<TInput, TOutput>().register(this);\r\n  }\r\n\r\n  /**\r\n   * Execute the tool with the given arguments\r\n   * @throws {ToolExecutionError} If execution fails\r\n   */\r\n  public async executeTool(args: unknown): Promise<TOutput> {\r\n    try {\r\n      return await this.execute(args as TInput);\r\n    } catch (error) {\r\n      throw new ToolExecutionError(this.getName(), \"Execution failed\", error);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Tool repository class\r\n */\r\nexport class ToolRepository<\r\n  TInput = unknown,\r\n  TOutput = unknown,\r\n> extends BaseRepository<Tool<TInput, TOutput>, ToolDefinition> {\r\n  /**\r\n   * Register all tool handlers with the MCP server\r\n   */\r\n  public registerWithServer(server: Server): void {\r\n    // Register tool list handler\r\n    server.setRequestHandler(ListToolsRequestSchema, async () => {\r\n      return {\r\n        tools: this.getAllDefinitions(),\r\n      };\r\n    });\r\n\r\n    // Register tool call handler\r\n    server.setRequestHandler(CallToolRequestSchema, async (request) => {\r\n      const { name, arguments: args } = request.params;\r\n\r\n      try {\r\n        const tool = this.get(name);\r\n\r\n        if (!tool) {\r\n          throw new ComponentError(\r\n            ComponentErrorType.NOT_FOUND,\r\n            `Unknown tool: ${name}`,\r\n            name\r\n          );\r\n        }\r\n\r\n        const result = await tool.executeTool(args);\r\n\r\n        return {\r\n          content: [\r\n            {\r\n              type: \"text\",\r\n              text:\r\n                typeof result === \"string\" ? result : JSON.stringify(result),\r\n            },\r\n          ],\r\n        };\r\n      } catch (error) {\r\n        console.error(`‚ùå Tool execution error (${name}):`, error);\r\n\r\n        // Format error for client\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : String(error);\r\n\r\n        return {\r\n          content: [\r\n            {\r\n              type: \"text\",\r\n              text: `Error executing tool ${name}: ${errorMessage}`,\r\n            },\r\n          ],\r\n        };\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {\r\n  BaseComponent,\r\n  BaseDefinition,\r\n  BaseRepository,\r\n  ComponentError,\r\n  ComponentErrorType,\r\n} from \"./base\";\r\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\r\nimport {\r\n  GetPromptRequestSchema,\r\n  ListPromptsRequestSchema,\r\n} from \"@modelcontextprotocol/sdk/types.js\";\r\nimport { Registry } from \"./registry\";\r\n\r\n/**\r\n * Prompt message interface\r\n */\r\nexport interface PromptMessage {\r\n  role: string;\r\n  content: {\r\n    type: string;\r\n    text: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Prompt definition interface\r\n */\r\nexport interface PromptDefinition extends BaseDefinition {\r\n  arguments: Array<{\r\n    name: string;\r\n    description: string;\r\n    required: boolean;\r\n  }>;\r\n}\r\n\r\n/**\r\n * Prompt generation error class\r\n */\r\nexport class PromptGenerationError extends Error {\r\n  constructor(\r\n    public readonly promptName: string,\r\n    message: string,\r\n    public readonly cause?: unknown\r\n  ) {\r\n    super(`Prompt generation error (${promptName}): ${message}`);\r\n    this.name = \"PromptGenerationError\";\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt component class\r\n */\r\nexport class Prompt<TArgs = unknown> extends BaseComponent<PromptDefinition> {\r\n  constructor(\r\n    definition: PromptDefinition,\r\n    private readonly getMessages: (args: TArgs) => Promise<PromptMessage[]>\r\n  ) {\r\n    super(definition);\r\n    // Auto-register with repository\r\n    Registry.getPromptRepository<TArgs>().register(this);\r\n  }\r\n\r\n  /**\r\n   * Generate messages for the prompt\r\n   * @throws {PromptGenerationError} If generation fails\r\n   */\r\n  public async generateMessages(args: unknown): Promise<PromptMessage[]> {\r\n    try {\r\n      return await this.getMessages(args as TArgs);\r\n    } catch (error) {\r\n      throw new PromptGenerationError(\r\n        this.getName(),\r\n        \"Message generation failed\",\r\n        error\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt repository class\r\n */\r\nexport class PromptRepository<TArgs = unknown> extends BaseRepository<\r\n  Prompt<TArgs>,\r\n  PromptDefinition\r\n> {\r\n  /**\r\n   * Register all prompt handlers with the MCP server\r\n   */\r\n  public registerWithServer(server: Server): void {\r\n    console.log(\"üí≠ Registering prompt handlers with server\");\r\n\r\n    // Register prompt list handler\r\n    server.setRequestHandler(ListPromptsRequestSchema, async () => {\r\n      console.log(\"üìã Handling ListPrompts request\");\r\n      return {\r\n        prompts: this.getAllDefinitions(),\r\n      };\r\n    });\r\n\r\n    // Register prompt messages handler\r\n    server.setRequestHandler(GetPromptRequestSchema, async (request) => {\r\n      const { name, arguments: args } = request.params;\r\n      console.log(`üí¨ Handling prompt request: ${name}`, args);\r\n\r\n      try {\r\n        const prompt = this.get(name);\r\n\r\n        if (!prompt) {\r\n          throw new ComponentError(\r\n            ComponentErrorType.NOT_FOUND,\r\n            `Unknown prompt: ${name}`,\r\n            name\r\n          );\r\n        }\r\n\r\n        const messages = await prompt.generateMessages(args);\r\n        console.log(`‚úÖ Prompt ${name} generated messages successfully`);\r\n\r\n        return { messages };\r\n      } catch (error) {\r\n        console.error(`‚ùå Prompt generation error (${name}):`, error);\r\n\r\n        // Rethrow to be handled by MCP server\r\n        throw error instanceof Error\r\n          ? error\r\n          : new Error(`Error generating prompt ${name}: ${String(error)}`);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { ToolRepository } from \"./tool\";\nimport { PromptRepository } from \"./prompt\";\n\n/**\n * Registry status enum for lifecycle management\n */\nexport enum RegistryStatus {\n  INITIALIZING = \"initializing\",\n  READY = \"ready\",\n  ERROR = \"error\",\n}\n\n/**\n * Registry for managing all MCP repositories\n * Implemented as a singleton to allow auto-registration of components\n */\nexport class Registry {\n  private static instance: Registry;\n  private readonly toolRepository = new ToolRepository();\n  private readonly promptRepository = new PromptRepository();\n  private status: RegistryStatus = RegistryStatus.INITIALIZING;\n  private error?: Error;\n\n  private constructor() {\n    // Constructor is private for singleton pattern\n  }\n\n  /**\n   * Get the singleton instance\n   */\n  public static getInstance(): Registry {\n    if (!Registry.instance) {\n      Registry.instance = new Registry();\n    }\n    return Registry.instance;\n  }\n\n  /**\n   * Get the tool repository\n   */\n  public static getToolRepository<\n    TInput = unknown,\n    TOutput = unknown,\n  >(): ToolRepository<TInput, TOutput> {\n    return Registry.getInstance().toolRepository as ToolRepository<\n      TInput,\n      TOutput\n    >;\n  }\n\n  /**\n   * Get the prompt repository\n   */\n  public static getPromptRepository<\n    TArgs = unknown,\n  >(): PromptRepository<TArgs> {\n    return Registry.getInstance().promptRepository as PromptRepository<TArgs>;\n  }\n\n  /**\n   * Get current registry status\n   */\n  public getStatus(): RegistryStatus {\n    return this.status;\n  }\n\n  /**\n   * Get error if status is ERROR\n   */\n  public getError(): Error | undefined {\n    return this.error;\n  }\n\n  /**\n   * Register all repositories with the MCP server\n   */\n  public registerWithServer(server: Server): void {\n    try {\n      this.toolRepository.registerWithServer(server);\n      this.promptRepository.registerWithServer(server);\n      this.status = RegistryStatus.READY;\n\n      // Log registration summary\n      this.logRegistrationSummary();\n    } catch (err) {\n      this.status = RegistryStatus.ERROR;\n      this.error = err instanceof Error ? err : new Error(String(err));\n      console.error(\"‚ùå Registry initialization failed:\", this.error);\n      throw this.error;\n    }\n  }\n\n  /**\n   * Log a summary of all registered components\n   */\n  private logRegistrationSummary(): void {\n    const tools = this.toolRepository.getAll();\n    const prompts = this.promptRepository.getAll();\n\n    console.log(\"\\n=== MCP Registry Initialization Complete ===\");\n\n    console.log(\"\\nüìã Registered Components:\");\n    console.table([\n      ...tools.map((tool) => ({\n        type: \"Tool\",\n        name: tool.getName(),\n        description: tool.getDescription(),\n      })),\n      ...prompts.map((prompt) => ({\n        type: \"Prompt\",\n        name: prompt.getName(),\n        description: prompt.getDescription(),\n      })),\n    ]);\n\n    console.log(\n      `\\n‚úÖ MCP Server ready with ${tools.length} tools and ${prompts.length} prompts\\n`\n    );\n  }\n}\n","// ---------- Imports ----------\nimport { z } from \"zod\";\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\nimport { Tool } from \"../core\";\n\n// ---------- Schemas ----------\n/**\n * Input schema for the echo tool\n */\nconst EchoToolInputSchema = z.object({\n  message: z.string().describe(\"The message to echo back\"),\n});\n\n/**\n * Output schema for the echo tool\n */\nconst EchoToolOutputSchema = z.object({\n  message: z.string().describe(\"The echoed message\"),\n});\n\ntype EchoToolInput = z.infer<typeof EchoToolInputSchema>;\ntype EchoToolOutput = z.infer<typeof EchoToolOutputSchema>;\n\n/**\n * Echo tool implementation\n */\nexport const echoTool = new Tool<EchoToolInput, EchoToolOutput>(\n  {\n    name: \"echo\",\n    description: \"Echoes the input message back to the client\",\n    inputSchema: zodToJsonSchema(EchoToolInputSchema),\n    outputSchema: zodToJsonSchema(EchoToolOutputSchema),\n  },\n  async (args) => {\n    const input = EchoToolInputSchema.parse(args);\n    return { message: input.message };\n  }\n);\n","// ---------- Imports ----------\r\nimport { z } from \"zod\";\r\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\r\nimport { Tool } from \"../core\";\r\n\r\n// ---------- Schemas ----------\r\n/**\r\n * Input schema for the add tool\r\n */\r\nconst AddToolInputSchema = z.object({\r\n  a: z.number().describe(\"First number\"),\r\n  b: z.number().describe(\"Second number\"),\r\n});\r\n\r\n/**\r\n * Output schema for the add tool\r\n */\r\nconst AddToolOutputSchema = z.object({\r\n  result: z.number().describe(\"Sum of the two numbers\"),\r\n});\r\n\r\ntype AddToolInput = z.infer<typeof AddToolInputSchema>;\r\ntype AddToolOutput = z.infer<typeof AddToolOutputSchema>;\r\n\r\n/**\r\n * Add tool implementation\r\n */\r\nexport const addTool = new Tool<AddToolInput, AddToolOutput>(\r\n  {\r\n    name: \"add\",\r\n    description: \"Adds two numbers\",\r\n    inputSchema: zodToJsonSchema(AddToolInputSchema),\r\n    outputSchema: zodToJsonSchema(AddToolOutputSchema),\r\n  },\r\n  async (args) => {\r\n    const input = AddToolInputSchema.parse(args);\r\n    return { result: input.a + input.b };\r\n  }\r\n);\r\n","// ---------- Imports ----------\r\nimport { z } from \"zod\";\r\nimport { Prompt } from \"../core\";\r\n\r\n// ---------- Schemas ----------\r\n/**\r\n * Arguments schema for the git workflow prompt\r\n */\r\nconst GitWorkflowPromptArgsSchema = z.object({\r\n  changes: z.string().describe(\"Git diff or description of changes\"),\r\n});\r\n\r\ntype GitWorkflowPromptArgs = z.infer<typeof GitWorkflowPromptArgsSchema>;\r\n\r\n/**\r\n * Git workflow prompt implementation\r\n */\r\nexport const prompt = new Prompt<GitWorkflowPromptArgs>(\r\n  {\r\n    name: \"git-workflow\",\r\n    description: \"Generate Git add, commit and push workflow commands\",\r\n    arguments: [\r\n      {\r\n        name: \"changes\",\r\n        description: \"Git diff or description of changes\",\r\n        required: true,\r\n      },\r\n    ],\r\n  },\r\n  async (args) => {\r\n    return [\r\n      {\r\n        role: \"user\",\r\n        content: {\r\n          type: \"text\",\r\n          text: `Generate a concise but descriptive commit message for these changes and return the full git workflow commands:\\n\\n${args.changes}\\n\\nRespond with the exact commands to run in this format:\\n\\ngit add .\\ngit commit -m \"{generated commit message}\"\\ngit push`,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n);\r\n"],"mappings":"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","names":["config","prompt","prompt","z","zodToJsonSchema","z","zodToJsonSchema","z","z"]}